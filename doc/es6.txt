http://google.github.io/traceur-compiler/demo/repl.html
http://babeljs.io/repl/


http://es6.ruanyifeng.com/
https://github.com/xudafeng/xudafeng.github.com/blob/master/translation/startECMAScript6.md
http://www.ido321.com/1634.html
https://github.com/frontnode/PPT/blob/master/ppts/ecmascript6-development.md
http://wiki.jikexueyuan.com/project/es6/intro.html
http://code.tutsplus.com/articles/ecmascript-6-today--net-31582
子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。
ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。
大多数浏览器的ES5实现之中，每一个对象都有__proto__属性，指向对应的构造函数的prototype属性。
（1）子类的__proto__属性，表示构造函数的继承，总是指向父类。
（2）子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。
B.__proto__ === A // true
B.prototype.__proto__ === A.prototype // true
作为一个对象，子类（B）的原型（__proto__属性）是父类（A）；作为一个构造函数，子类（B）的原型（prototype属性）是父类的实例。
B.prototype = new A();// 等同于 B.prototype.__proto__ = A.prototype;


npm install -g traceur
traceur --script calc.es6.js --out calc.es5.js --experimental

npm install --global babel-cli
npm install -g babel-core@5
<script src="node_modules/babel-core/browser.js"></script>

npm install -g broccoli-cli
http://broccolijs.com/

npm install -g typescript

http://riotjs.com/zh/guide/application-design/




es5
Prototype(原型)是Javascript中实现对象继承的基础方式，使用方式为 [function].prototype = [object1]
[function]可认为相当于type/class，这样可以使该类型的所有对象继承[object1]中所有Public的属性和方法。在这里public的意思是使用了this.xxx。
http://www.cnblogs.com/hiteddy/archive/2011/12/16/Object_Oriented_javascript_prototype_inheritance.html

function Child(age){
    Parent.call(this,age);//对象冒充，给超类型传参
}
Child.prototype = new Parent();//原型链继承
call([thisObj[,arg1[, arg2[, [,.argN]]]]])   // call()的用法：调用一个对象的一个方法，以另一个对象替换当前对象。

function obj(o){  // 这种继承借助原型并基于已有的对象创建新对象，同时还不用创建自定义类型的方式称为原型式继承
         function F(){}
         F.prototype = o;
         return new F();
 }
任何一个prototype对象都有一个constructor属性，指向它的构造函数。
http://segmentfault.com/a/1190000002440502   ***
http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html
http://www.zhangxinxu.com/wordpress/2012/01/introducing-ecmascript-5-1/
https://es5.github.io/
全局对象是最顶层的对象，在浏览器环境指的是window对象，在Node.js指的是global对象。