http://ixirong.com/2015/03/16/something-about-fastdfs/  fastdfs 环境搭建使用及最佳实践


http://blog.javachen.com/2013/04/06/install-cloudera-cdh-by-yum/   使用yum安装CDH Hadoop集群 
http://blog.csdn.net/sweetvvck/article/details/38842665?utm_source=tuicool
wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz 

redis  Twemproxy 
https://github.com/springside/springside4/wiki/redis
http://www.cnblogs.com/edwinchen/p/3816938.html
http://blog.joshuawhite.com/java/caching-with-spring-data-redis/
http://www.javabeat.net/spring-data-redis-example/
https://blog.openshift.com/build-cloud-enabled-java-redis-applications-with-spring-on-openshift/
https://www.packtpub.com/books/content/building-applications-spring-data-redis
http://www.ibm.com/developerworks/library/os-springredis/
http://projects.spring.io/spring-data-redis/
http://snowolf.iteye.com/blog/1666908
http://www.javacodegeeks.com/2012/06/using-redis-with-spring.html
https://github.com/xetorthio/jedis/wiki/Getting-started
http://kaveh.ghahremani.me/2012/12/24/twemproxy-redis-quickstart/

ctx = new AnnotationConfigApplicationContext(AppConfig.class);
ctx = new GenericXmlApplicationContext("/META-INF/spring/app-context.xml");
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = LocalRedisConfig.class)
<import resource="redis-context.xml"/>


HttpClient4.3 Fluent API
Request.Get(url).execute().returnContent().asString();
Executor executor = Executor.newInstance(httpClient);
String resultString = executor.execute(Request.Get(url)).returnContent().asString();
http://blog.csdn.net/vector_yi/article/details/24298629


Google Guava中的RateLimiter，实际上就实现了Token Bucket的算法
https://github.com/springside/springside4/wiki/Rate-Limiter
https://github.com/springside/springside4/wiki/Hystrix


Sonar --  是SCM, CI, Issue Tracker和Wiki外，另一个必不可少的项目管理软件.
https://github.com/springside/springside4/wiki/Sonar
https://github.com/springside/springside4/tree/master/support/sonar

storm
http://shiyanjun.cn/archives/977.html

spark
http://shiyanjun.cn/archives/696.html


Zookeeper是一个用户维护配置信息、命名、分布式同步以及分组服务的集中式服务框架，它使用Java语言编写，通过Zab协议来保证节点的一致性。因为Zookeeper是一个CP型系统，所以当网络分区问题发生时，系统就不能注册或查找服务。
Doozer是一个一致性的、分布式存储系统，使用Go语言编写，通过Paxos来保证强一致性，Doozer项目目前已经停止更新并有将近160个分支。和Zookeeper一样，Doozer也是一个CP型系统，在网络分区问题发生时，会有同样的问题。
etcd是一个用于共享配置和服务发现的高可用的键值存储系统，使用Go语言编写，通过Raft来保证一致性，有基于HTTP+JSON的API接口。etcd也是一个强一致性系统，但是etcd似乎支持从non-leaders中读取数据以提高可用性；另外，写操作仍然需要leader的支持，所以在网络分区时，写操作仍可能失败。

Paxos
– Zookeeper
– Doozer
– Chubby
Raft
– Etcd

 
http://blog.csdn.net/kisimple/article/details/42075931    taobao  Diamond#1：设计
http://blog.csdn.net/kisimple/article/details/42023495    TFS与Tair的对照表

http://ju.outofmemory.cn/entry/43357  海量小文件问题综述

kvstore
http://www.ttlsa.com/redis/ssdb-redis-alternatives/
http://www.wzxue.com/ssdb/?utm_source=tuicool
http://blog.csdn.net/zhoubl668/article/details/45314319   
http://idning.github.io/coding-for-ssd.html
http://idning.github.io/ssd-cache.html#id36
https://github.com/siddontang/ledisdb
https://github.com/docker/go-redis-server