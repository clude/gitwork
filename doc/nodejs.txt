npm install -g express-generator
express -e project_name    

http://shiyanjun.cn/archives/868.html

http://www.html-js.com/article/2356  puer 搭建服务器
http://www.lvtao.net/content/book/node.js.htm
http://ourjs.com/detail/5417e6ea4f1286640f000002
http://ourjs.com/detail/55a8b98d20cbb7f655000020
http://www.ituring.com.cn/article/199288

GYP是Google出品的新一代C++构建系统  由于GYP在windows下默认使用ninja来编译，所以要生成MSVS工程文件，需要设置GYP_GENERATOR为msvs。也可以指定MSVS的版本，比如 set GYP_MSVS_VERSION=2013
http://blog.csdn.net/zhubc/article/details/22006419
Node.js的源码主要由C++代码和JavaScript代码构成，但是却用gyp工具（http://code.google.com/p/gyp/ ）来做源码的项目管理，该工具采用Python语言写成的。在Windows平台上，Node.js采用gyp来生成Visual Studio Solution文件，
http://www.akmumu.com/2014/04/10/265.html

async
http://yijiebuyi.com/blog/be234394cd350de16479c583f6f6bcb6.html


setx NODE_PATH "%NODE_PATH%;C:\Users\Administrator\AppData\Roaming\npm\node_modules"
npm config set msvs_version 2012 --global
npm install -g yo bower grunt-cli gulp
npm install -g generator-webapp generator-angular
http://segmentfault.com/a/1190000000473869   nrm 

https://github.com/tanepiper/SublimeText-Nodejs
node --debug 命令选项可以启动调试服务器，默认情况下调试端口是 5858，也可以使用 --debug=1234 指定调试端口为 1234
http://my.oschina.net/ozil/blog/185526
在代码中加入debugger标签，当Nodejs执行到debugger标签时会自动暂停（debugger标签相当于在代码中开启一个断点）  http://www.cnblogs.com/moonz-wu/archive/2012/01/15/2322120.html
npm install -g node-inspector

http://shiyanjun.cn/archives/868.html Node.js入门学习笔记
安装Chrome Developer插件：http://chromedevtools.googlecode.com/svn/update/dev/
node --debug-brk=9222 /home/shirdrn/nodejs/debug.js 接着，可以在Eclipse中对debug.js的代码设置断点，执行Debug As => Debug Configurations => 选择Standalone V8 VM，创建一个调试配置，然后可以调试运行，在断点处查看变量的值。


http://www.w3cfuns.com/article-5598692-1-1.html   npm install -g nodemon  pm2

http://www.oschina.net/translate/goodbye-node-forever-hello-pm2?cmp
http://blog.caustik.com/2012/08/19/node-js-w1m-concurrent-connections/  Node.js w/1M concurrent connections
http://blog.shiqichan.com/introducing-mqtt/    npm install -g mqtt mosca
https://github.com/mcollina/mosca/wiki/MQTT-over-Websockets
http://www.cnblogs.com/youxilua/archive/2013/04/25/3041528.html
http://www.jdon.com/46309   垂直水平扩展与消息集成方案
http://mcollina.github.io/mqtt_and_nodejs/
http://ponyfoo.com/articles/teach-yourself-nodejs-in-10-steps  
https://github.com/SocketCluster/socketcluster  
http://blog.jobbole.com/40135/    极速Node.js：来自LinkedIn的10个性能提升秘籍
https://github.com/caolan/async      http://www.tuicool.com/articles/vU77Nf
https://github.com/creationix/step   http://blog.csdn.net/zhangxin09/article/details/13018739
主要的原因是大多数web服务器对每一个request请求要么使用一个线程要么使用一个进程来处理,这也就是说在这个request返回之前线程或进程占用的资源是不会释放的.以每个线程占用2m的内存来说, 5000个并发就需要10g的内存  nodejs是一个单线程单进程的服务器, 它对于request的请求并不使用线程去处理, 而采用了注册回调的方式. 也就是说对于request请求并不等到整个处理结束就释放连接去服务另一个请求.而处理过程被委托到后台线程(这里的线程与rquest的线程是不同的)中执行, 直到之前的处理结束再将数据发送回客户端.
网络的I/O就成为了服务器的瓶颈.从这里可以看出nodejs并不适合处理这样的情况. 根据Ryan自己描述每个request请求处理不超过5ms会有较好的性能.具体的文章可以看这里.那么什么样的应用符合这样的要求呢? 我认为微博, 聊天室和某些mobile应用是适合的.
nodejs提供了良好的包管理程序npm (node package management), 还有版本管理程序nvm (nodejs version management).

http://www.ianzoe.com/npmchang-yong-mo-kuai/  NPM常用模块
http://www.ianzoe.com/qian-duan-mian-shi-ti-gao/  前端面试题稿
http://www.ianzoe.com/yi-dong-qian-duan-kai-fa-ji-lei/   移动前端开发积累

https://cnodejs.org/topic/5338c5db7cbade005b023c98
http://segmentfault.com/a/1190000000473869
http://chenpeng.info/html/2351
https://npm.taobao.org/
https://cnodejs.org/topic/4f9904f9407edba21468f31e
sudo npm install -g nrm
nrm use taobao        
npm config set ca ""
npm install -g cnpm --registry=https://registry.npm.taobao.org
cnpm install [name]
搜索镜像: https://npm.taobao.org
首先安装n模块：npm install -g n
升级node.js到最新稳定版  n stable

yum remove nodejs npm -y  


sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install python-software-properties python g++ make nodejs npm
curl -sL https://deb.nodesource.com/setup | sudo bash -
sudo apt-get install -y nodejs

curl -L https://npmjs.com/install.sh | sh
ln -s /usr/local/bin/npm /usr/bin/npm  

sudo npm update -g npm
sudo npm uninstall npm -g


npm install -g generator-webapp  
npm install -g grunt-cli grunt-init gulp http-server bower 
npm install matchdep load-grunt-tasks grunt-contrib-imagemin  grunt-contrib-jshint grunt-contrib-clean grunt-contrib-concat grunt-contrib-copy grunt-contrib-uglify grunt-contrib-watch grunt-contrib-mincss grunt-contrib-htmlmin grunt-contrib-csslint --save-dev
npm init 

使用GRUNT需要两个文件，Gruntfile.js（用于配置grunt的任务），package.json（用于描述项目信息，和填写依赖）
http://javascript.ruanyifeng.com/tool/grunt.html
http://www.w3cplus.com/tools/get-up-running-grunt.html
http://www.gruntjs.org/docs/getting-started.html
http://solodu.com/speed-project-with-grunt/
http://hdwill.info/post/2014/gruntjs-imagemin
http://blog.grayghostvisuals.com/grunt/image-optimization/
http://zerosixthree.se/getting-started-with-grunt/


npm install gulp-util gulp-imagemin  gulp-ruby-sass gulp-minify-css gulp-jshint gulp-uglify gulp-rename gulp-concat gulp-clean gulp-livereload tiny-lr --save-dev 
http://blog.90-designer.com/index.php/archives/gulp.html   gulp
http://www.dbpoo.com/getting-started-with-gulp/
http://ued.ctrip.com/blog/?p=3582  压缩图片
http://geek100.com/2684/   gulp-image-resize


http://www.darrenfang.com/2013/12/install-tengine-on-centos/
http://heylinux.com/archives/2938.html
http://www.tuicool.com/articles/yyA732i
https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration
http://dak1n1.com/blog/12-nginx-performance-tuning
http://blog.martinfjordvald.com/2011/04/optimizing-nginx-for-high-traffic-loads/
http://ae.koroglu.org/using-nginx-as-load-balancer-for-tomcat/


http://www.infoq.com/cn/articles/nodejs-callback-hell/   Node.js软肋之回调大坑

im
http://blog.jobbole.com/81125/
http://www.doc88.com/p-7136801595019.html
http://www.jianshu.com/p/d9b1273a93fd

启动 内存 
http://segmentfault.com/a/1190000002429825
http://blog.eood.cn/node-js_gc
在node启动时可以传递参数来调整内在限制的大小（注意：只能在启动时指定），如下：
--max-old-space-size //老生代内存空间的最大值
--max-new-space-size //新生代内存空间的最大值

新生代回收算法：Scavenge；
老生代回收算法：Mark-Sweep & Mark-Compact
查看垃圾回收日志的方式，在启动时添加参数 --trace_gc 。
启动时使用 --prof 参数，可以得到V8执行时的性能分析数据。


http://segmentfault.com/a/1190000000385867   Request让 Node.js http请求变得超简单
request(url).pipe(fs.createWriteStream(filepath));
fs.writeFileSync(dst, fs.readFileSync(src));
fs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json'))
numCPUs=require('os').cpus().length;

http://zhaofei.tk/2015/10/15/lightweight-GUI/    http://nwjs.io/

cheerio
https://cnodejs.org/topic/5203a71844e76d216a727d2e
http://www.tuicool.com/articles/z2YbAr
http://www.zhanxin.info/nodejs/2013-11-04-nodejs-practical-study-notes.html
http://www.cnblogs.com/edwardstudy/p/4133421.html

http://www.yyyweb.com/demo/html5-tools/html5-canvas.html
 http://dreamsky.github.io/main/blog/metronic-bootstrap/metronic.bootstrap.rar
http://nightwatchjs.org/   自动测试  Selenium WebDriver API
http://slimerjs.org/  它是类似 PhantomJS 的一个工具，除了它运行在 Gecko 上而不是Webkit。SlimerJS 提供几乎和 PhantomJS 相同的 API
Casperjs是基于Phantomjs

https://code.visualstudio.com/docs/runtimes/nodejs   visual code
npm install -g tsd
tsd query node express --action install

http://www.cnblogs.com/windwithlife/archive/2013/02/25/2923235.html  Node.JS对MongoDB的支持有两种常用的组件mongodb, mongoose
基于mongodb的支持。这个for Node.JS的驱动是基于事件驱动的，所以用法基本上都是异步回调函方式。
https://cnodejs.org/topic/51ff720b44e76d216afe34d9
http://www.open-open.com/lib/view/open1375885691296.html
https://github.com/felixge/node-mysql   mysql
https://github.com/sequelize/sequelize
https://cnodejs.org/topic/5201c94144e76d216a39c4dc

http://tech.meituan.com/node-fullstack-development-practice.html
定位内存泄露的具体原因：
- v8-profiler
- node-heapdump
- node-mtrace
- dtrace
- node-memwatch
Nginx位于Node服务之前，用做负载均衡、服务调度、Gzip压缩等。之后便是Node服务，我们通过PM2.5进行Node服务的Cluster部署和负载均衡

http://blog.fens.me/nodejs-roadmap/   Nodejs学习路线图
for i in {1..10} ; do curl -is http://127.0.0.1:8080/hello/mark ; done
 
http://code.oneapm.com/nodejs/2015/06/27/intereference/  debug

http://tech.meituan.com/performance-framework-and-platform.html  js性能分析
http://tech.meituan.com/solr-spatial-search.html   solr gps搜索
http://blog.csdn.net/shootyou/article/details/6615051   CLOSE_WAIT
netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'  