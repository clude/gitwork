https://github.com/excilys/androidannotations/wiki/AvailableAnnotations
https://github.com/excilys/androidannotations/wiki/WorkingWithThreads  后台线程@Background和UI线程@UiThread  http://zhenhappy.github.io/2015/11/29/Android-Annotations-7-Threading.html
http://zhenhappy.github.io/2015/11/05/JRebel-for-Android-Studio.html   JRebel for Android实战用法

https://github.com/is00hcw/AndroidDevTools
http://m.blog.csdn.net/blog/Estellise/41758401  eventbus
http://blog.chengyunfeng.com/?p=449
http://blog.jobbole.com/66606/
https://github.com/excilys/androidannotations/wiki
http://coolshell.info/blog/2014/10/android-opensource.html
http://www.csdn.net/article/2015-08-20/2825506
http://my.oschina.net/oneapmofficial/blog/535430  android studio 优化
http://zkread.com/article/503904.html  Android应用开发编译框架流程
http://lenciel.cn/2012/02/integration-of-proguard-and-maven-in-android-projects/   proguard
https://buck.readthedocs.org/en/latest/quick_start.html  buck compile

https://oneapm.kf5.com/posts/view/45662/?_ga=1.104812352.1380946664.1448242701   oneapm监控
https://yq.aliyun.com/articles/3005?spm=5176.2020520130.105.27.bSTxEe&msctype=pmsg&mscmsgid=109716012601312875&   Android绘制流程

http://www.infoq.com/cn/articles/wechat-android-app-architecture?utm_source=infoq&utm_medium=popular_widget&utm_campaign=popular_content_list&utm_content=homepage
两个问题，一是单dex 65535方法数限制，二是线性内存分配器（LinearAlloc）限制。今天的Android开发者看到这两个限制都不会陌生。前者是因为Android的早期设计中，对dex文件中方法id用16位整型标记，单个dex文件中的方法数无法超过65535，eclipse环境中生成不了未做过proguard的debug apk。后者则是dalvik虚拟机用来加载类的堆内存大小被硬编码了，2.3以下是5M，2.3以上是8M，微信无法安装的原因就是因为这个堆内存被耗尽导致dexopt失败。
今天来看，Google已经给出了一些可靠的解决方案，辅以更加先进的gradle + Android Studio，开发者们可能根本不会再遇到这两个经典问题，。官方的MultiDex分dex机制解决了方法数限制的问题，其中main dex最小化原则，结合dalvik LinearAlloc heap size调整（修改到了16M），使得dexopt的失败几率大幅下降。而art的出现彻底不再存在LinearAlloc这样的限制官方的MultiDex分dex机制解决了方法数限制的问题，其中main dex最小化原则，结合dalvik LinearAlloc heap size调整（修改到了16M），使得dexopt的失败几率大幅下降。而art的出现彻底不再存在LinearAlloc这样的限制。
Google看来也意识到了目前应用方法数爆棚的问题, 目前在已经在API 21中提供了通用的解决方案，那就是android-support-multidex.jar. 这个jar包最低可以支持到API 4的版本(Android L及以上版本会默认支持mutidex).
http://blog.csdn.net/t12x3456/article/details/40837287
http://segmentfault.com/a/1190000002910311
http://www.alloyteam.com/2015/03/shi-yong-gradle-da-bao-zhi-ding-bao-ming-he-lei-di-jar/


当 Android 系统安装一个应用的时候，有一步是对 Dex 进行优化，这个过程有一个专门的工具来处理，叫 DexOpt。DexOpt 是在第一次加载 Dex 文件的时候执行的。这个过程会生成一个 ODEX 文件，即 Optimised Dex。执行 ODEX 的效率会比直接执行 Dex 文件的效率要高很多。
https://segmentfault.com/a/1190000004053072

三方工具
http://apm.testin.cn/task/4594/demo/report
http://pre.im/

debug
http://stormzhang.com/android/2015/03/05/android-debug-use-chrome/

test
http://mqc.aliyun.com/doc.htm?id=8  Robotium编写登录APP的自动化脚本
http://mqc.aliyun.com/doc.htm?id=44  Appium

AndFix
http://www.oschina.net/p/andfix
http://blog.csdn.net/qxs965266509/article/details/49816007
http://blog.csdn.net/lmj623565791/article/details/49883661
https://github.com/Qihoo360/DroidPlugin
https://github.com/dodola/HotFix
https://github.com/jasonross/Nuwa
https://github.com/bunnyblue/DroidFix
http://www.tuicool.com/articles/Fraqeab
http://blog.csdn.net/t12x3456/article/details/39958755

decompile
https://github.com/google/enjarify
https://github.com/iBotPeaches/Apktool


package
https://github.com/umeng/umeng-muti-channel-build-tool
buck

http://hukai.me/android-training-course-in-chinese/index.html android training


图片缓存目前的主要开源项目包括Imageloader，Picasso、Glide和Fresco
http://logful.github.io/   

http://www.cnblogs.com/bluelife/p/4001694.html   Duplicate files copied in APK META-INF/DEPENDENCIES

播放器
http://segmentfault.com/a/1190000002739762
https://github.com/Bilibili/ijkplayer



lua
http://www.ibm.com/developerworks/cn/opensource/os-cn-LUAScript/index.html   Luajava 现在仅支持到 Lua5.1
http://www.oschina.net/p/android-lua-run

loader
https://github.com/mmin18/AndroidDynamicLoader
https://github.com/singwhatiwanna/dynamic-load-apk
http://www.trinea.cn/android/android-plugin/
http://www.zhihu.com/question/19981105
https://github.com/Qihoo360/DroidPlugin

arch
http://www.zhihu.com/question/21406685
http://www.uml.org.cn/mobiledev/201310211.asp
https://github.com/android10/Android-CleanArchitecture

讯飞语音 com.iflytek.speech
com.koushikdutta.async; https://github.com/koush/AndroidAsync
net.tsz.afinal  https://github.com/yangfuhai/afinal
org.androidannotations.annotations  http://androidannotations.org/
https://github.com/pedant/sweet-alert-dialog
com.loopj.android.image;

https://github.com/Trinea/android-open-project
http://mob.com/
http://mobilehub.io/categories/Development


http://bluereader.org/article/315423  http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/
https://github.com/kesenhoo/android-training-course-in-chinese


http://www.androidhive.info/2012/03/android-building-audio-player-tutorial/ mp3


https://github.com/facebook/stetho  debug tool


http://www.lightskystreet.com/categories/Android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ 最佳实践
http://www.lightskystreet.com/2015/06/13/google-for-android-9-tools/   tools

https://github.com/matrixxun/ProductTour  引导页
https://github.com/PaoloRotolo/AppIntro