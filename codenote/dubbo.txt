Remoting内部再划为Transport传输层和Exchange信息交换层，Transport层只负责单向消息传输，是对Mina,Netty,Grizzly的抽象，它也可以扩展UDP传输，而Exchange层是在传输层之上封装了Request-Response语义。
cluster，路由层，封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster, Directory, Router, LoadBalance
protocol，远程调用层，封将RPC调用，以Invocation, Result为中心，扩展接口为Protocol, Invoker, Exporter
exchange，信息交换层，封装请求响应模式，同步转异步，以Request, Response为中心，扩展接口为Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer
transport，网络传输层，抽象mina和netty为统一接口，以Message为中心，扩展接口为Channel, Transporter, Client, Server, Codec
serialize，数据序列化层，可复用的一些工具，扩展接口为Serialization, ObjectInput, ObjectOutput, ThreadPool
采用URL作为配置信息的统一格式，所有扩展点都通过传递URL携带配置信息。
扩展点配置文件：META-INF/dubbo/接口全限定名，内容为：配置名=扩展实现类全限定名，多个实现类用换行符分隔。

如果该实现有拷贝构造函数，则判定为扩展点Wrapper类。Wrapper不是扩展点实现，用于从ExtensionLoader返回扩展点时，Wrap在扩展点实现外。即从ExtensionLoader中返回的实际上是Wrapper类的实例，Wrapper持有了实际的扩展点实现类。
通过Wrapper类可以把所有扩展点公共逻辑移至Wrapper中。新加的Wrapper在所有的扩展点上添加了逻辑，有些类似AOP

基于扩展点的Wrapper机制，所有的Protocol扩展点都会自动套上Wrapper类。基于ProtocolFilterWrapper类，将所有Filter组装成链，在链的最后一节调用真实的引用。基于ProtocolListenerWrapper类，将所有InvokerListener和ExporterListener组装集合，在暴露和引用前后，进行回调。
包括监控在内，所有附加功能，全部通过Filter拦截实现。
public interface Registry extends Node, RegistryService {

只有在接口打了@SPI注解的接口类才会去查找扩展点实现会依次从这几个文件中读取扩展点
META-INF/dubbo/internal/   //dubbo内部实现的各种扩展都放在了这个目录了
META-INF/dubbo/
META-INF/services/
每个定义的spi的接口都会构建一个ExtensionLoader实例，存储在
ConcurrentMap<Class<?>,ExtensionLoader<?>> EXTENSION_LOADERS 这个map对象中

@Adaptive的作用是根据url.getProtocol()的值extName，去ExtensionLoader. getExtension( extName)选取具体的扩展点实现。

--client
com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker<T> --> 
com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(Invocation)  --(RpcInvocation)--> com.alibaba.dubbo.remoting.Endpoint.send(Object, boolean) 写入底层通信channel

com.alibaba.dubbo.rpc.protocol.dubbo.DubboCodec.decodeBody(Channel, InputStream, byte[])  --> new DecodeableRpcResult , com.alibaba.dubbo.remoting.exchange.Response.setResult(Object)

--server


com.alibaba.dubbo.remoting.transport.netty.NettyCodecAdapter.InternalDecoder.messageReceived(ChannelHandlerContext, MessageEvent) --> com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.decode(Channel, ChannelBuffer)
com.alibaba.dubbo.rpc.protocol.dubbo.DubboCodec.decodeBody(Channel, InputStream, byte[])  --> new DecodeableRpcInvocation , com.alibaba.dubbo.remoting.exchange.Request.setData(Object)
com.alibaba.dubbo.remoting.transport.netty.NettyHandler.messageReceived(ChannelHandlerContext, MessageEvent) --> *** com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(Channel, Object)    *** Response response = handleRequest(exchangeChannel, request);  channel.send(response);  <--- com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encodeResponse(Channel, ChannelBuffer, Response)
**-->  com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(ExchangeChannel, Request)    Object result = handler.reply(channel, msg);   --> com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.requestHandler  --> invoker.invoke(inv);
com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.doInvoke(T, String, Class<?>[], Object[])  jdk使用反射调用method
